=== TFO Graphviz ===
Contributors: chrisy
Tags: graphviz, flirble, network, diagram, graph, dot, neato, twopi, circo, fdp, visualisation, visualization, layout, hierarchical
Requires at least: 4.2.0
Tested up to: 4.8.2
Stable tag: 1.14
License: GPLv2 or later
License URI: http://www.gnu.org/licenses/gpl-2.0.html

Generates Graphviz graphics using shortcodes. Supports almost all Graphviz features.

== Description ==

[Graphviz](http://www.graphviz.org/) is a powerful tool for visualising network and tree structures that connect objects.

This WordPress plugin provides a shortcode mechanism to create Graphviz graphics within blogs, including image map generation and most
other Graphviz features.


= How to use TFO Graphviz =

The shortcode syntax is:

`
[graphviz <options>]
 <DOT code>
[/graphviz]
`

Where `<options>` is anything from this list. All are entirely optional:

* `height="*&lt;image_height&gt;*"`

  Adds a `height` attribute to the image tags to enable control of the image rendering. This is useful for making
  sure the graphic fits into a certain space and works well for SVG rendered graphs.

* `href="self|`*&lt;URL&gt;*`"`

  Encompasses the generated image with a link either to the image itself (with the `self` value) or to the provided URL. If the
  option is empty (for example, `href=""`) then no link is generated. This is the default.

* `id="`*&lt;id&gt;*`"`

  Provides the identifier used to link the generated image to an image map. If you use the `simple` option then it also
  provides the name of the generated DOT graph container (since Graphviz uses this to generate the image map). If not given
  then an identifier is generated with the form `tfo_graphviz_N` where *N* is an integer that starts at one when the plugin
  is loaded and is incremented with use.

* `imap="yes|no"`

  Graphviz can generate image maps using any URL's given in the DOT code so that clicking on objects in the resultant image
  will direct a web browser to a new page. The effect of this option is to both instruct Graphviz to generate a client-side
  image map and to also insert that map into the generated HTML. It will use the `id` value as the name of the map (see the
  `id` option for details). `imap` defaults to `no`.

  Take note that the `id` value specified in the shortcode tag must match the name of the graph inside your DOT; the HTML for the
  image map is generated by Graphviz using the name of the graph as the map id and name. This plugin uses the `id` specified
  in the shortcode tag to link the image to the map and thus these values need to match.

  For example, note that `mymap` is both the `id` and the graph name:

  `
  [graphviz imap="yes" title="This is my map" id="mymap"]
  digraph mymap {
    input[shape="box", style="rounded", label="My label", URL="/myurl"];
  }
  [/graphviz]
  `

  If you do not give the graph any name at all the results are undefined. Some versions of Graphviz use `%3` as the ID in the map
  but this may not be universally true.

* `lang="<dot|neato|twopi|circo|fdp>"`

  Specifies the particular Graphviz interpreter to use. The options are `dot`, `neato`, `twopi`, `circo` and `fdp`.
  The default is `dot`.

* `output="<png|gif|jpg|svg>"`

  Indicates the desired image format. Defaults to `png`.

* `simple="yes|no"`

  The `simple` option provides a very basic DOT wrapper around your code such that the following is possible:

  `
  [graphviz simple="yes"] a -> b -> c; [/graphviz]
  `

  The generated code would look like:

  `
  digraph tfo_graphviz_1 {
      a -> b -> c;
  }
  `

  See the `id` option for a description of how the name of the `digraph` is created. `simple` defaults to `no`.

* `title="`*&lt;title&gt;*`"`

  Indicates the title of the image. This is used in the `alt` and `title` attributes of the image reference. This
  defaults to an empty string. Note that image maps may indicate a `title` string which will appear in tool-tips.

* `width="*&lt;image_width&gt;*"`

  Adds a `width` attribute to the image tags to enable control of the image rendering. This is useful for making
  sure the graphic fits into a certain space and works well for SVG rendered graphs.


== Installation ==

Installation is simple. Either install from directly within WordPress or:

1. Download and unzip the plugin to the `/wp-content/plugins/tfo-graphviz` directory within your WordPress installation.
1. Make the directory `/wp-content/tfo-graphviz` and make it writable by the web server - this is where generated images and image maps go.
1. Activate the plugin through the 'Plugins' menu in WordPress.
1. Choose a generation method on the plugin settings page.
1. Use the `[graphviz]` shortcode to generate graphs.

You need access to a Graphviz renderer:

* By using a local installation of Graphviz and the `dot` binary.
* By using a local installation and PHP bindings to the library.

See the FAQ for more details on these options and http://www.graphviz.org/Download.php for details on installing Graphviz on your web server.


== Frequently Asked Questions ==

= What is Graphviz? =

[Graphviz](http://www.graphviz.org/) is a way of generating visualisations of structural relationships between objects. Almost any kind of diagram where something _connects_ to something else can be drawn and automatically laid out using the language DOT.

= How do I use this plugin? =

Use the `[graphviz]` shortcode. Details are in the *Description* section.

= How to I write DOT? =

The online documentation for [Graphviz](http://www.graphviz.org/) is terse and not especially helpful, in particular the [DOT language](http://www.graphviz.org/doc/info/lang.html) page is only helpful if you happen to be able to read an approximation of [BNF](http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form).

There are however several other introductions to Graphviz and DOT, including [an excerpt on the O'Reilly LinuxDevCenter.com site](http://linuxdevcenter.com/pub/a/linux/2004/05/06/graphviz_dot.html). Another approach would be to look at the examples in the [Graphviz gallery](http://www.graphviz.org/Gallery.php).

Users should note that DOT syntax varies between Graphviz processors and also between versions of those processors. If in doubt, find an example and experiment with it.

= Where can I see examples? =

* http://blog.flirble.org/2010/11/12/graphviz-demo/
* http://blog.flirble.org/2015/11/15/adding-svg-support-tfo-graphviz/

= Can I manipulate the rendered graph using CSS in my WordPress theme? =

The `img` elements are tagged with '`class="graphviz"`'.

= Nothing is being rendered, maybe my DOT is broken? =

If you're using a local Graphviz renderer then errors from Graphviz should be presented where you expect the graph to appear. Note that because of how Wordpress submits content to plugins the line numbering will not always match what you expect.

The error message when using the `dot` binary will contain the command line used as well as a line-numbered copy of the DOT that was used.

= I'm getting strange errors that make no sense, what gives? =

WordPress encodes HTML entities inside the shortcode block which this plugin attempts to demangle.

Unfortunately WordPress can also try to do smart character replacement, such as "..." into a UNICODE ellipsis character. The Graphviz plugin contains a mapping of many of these back to their ASCII equivalents, but it may not be complete. Let us know if you think this is breaking your DOT. It's also possible that non-ASCII7 characters do strange things too.

Adding `define("TFO_GV_DEBUG", true)` to wp_config.php will cause the plugin to create some diagnostic files in your system `tmp` directory. The file `pre-N.dot` is the contents of the DOT as given to the plugin by WordPress, `post-N.dot` is the results of the plugin attempting to demangle it. The `N` is a number that is incremented for each shortcode section interpreted. The plugin does not clean these files up.

= How do I install the Graphviz program (not this plugin) locally? =

This depends on your local operating system. You will find some details at http://www.graphviz.org/Download.php but many systems also have it in their own package management system, for example this is package `graphviz` on Debian, Ubuntu and Fedora systems.

There are currently two ways to use a local installation of Graphviz. The settings page will only show options for those
methods that are actually available and configured correctly.

1. Using a local Graphviz installation and the `dot` binary. You configure the path to this binary on the admin settings page of the plugin.
1. Using PHP bindings to the Graphviz library. This requires that `gv.php` is available.

= I've installed the PHP bindings but Graphviz doesn't work! =

This requires that `gv.php` is available and that the associated module is either already loaded or loadable with `dl()`.

The use of `dl()` is often disabled in `php.ini` and doesn't work on multithreaded webservers; it's entirely disabled in modern Apache2 httpd modules.

For these cases you must ensure the library is loaded with an entry like `extension=gv.so` or similar somewhere in the PHP configuration.

== Screenshots ==

1. Virtual Disk Stack

![Virtual Disk Stack](https://ps.w.org/tfo-graphviz/trunk/screenshot-1.png "Virtual Disk Stack")

This image was generated with the following markup:

`
    [graphviz lang="dot" output="png" simple="yes" imap="yes" href="self" title="TFO Graphviz Demo"]

    node [style="rounded,filled", color=lightblue2, fontsize=10, shape=box];
    edge [arrowhead=vee, arrowsize=0.5];

    subgraph cluster_client {
      node [label="File system", URL="http://en.wikipedia.org/wiki/Xfs"]; fs;
      node [label="LVM", URL="http://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)"]; lvm;
      node [label="Linux HBA driver", URL="http://www.ibm.com/developerworks/linux/library/l-scsi-subsystem/"]; clienthba;
      fs -> lvm -> clienthba;
      bgcolor = lightgrey;
      label = "Virtual Machine";
      URL = "http://www.ubuntu.com/";
    }

    subgraph cluster_esxi {
      node [label="Virtual HBA hardware"]; virtualhba;
      node [label="VMDK file"]; vmdk;
      node [label="vmfs"]; vmfs;
      node [label="ESXi HBA driver"]; vmhba;
      virtualhba -> vmdk -> vmfs -> vmhba;
      bgcolor = white;
      label = "Hypervisor";
      URL = "http://www.vmware.com/products/vsphere-hypervisor/";
    }

    subgraph cluster_hardware {
      node [label="Physical HBA hardware", URL="http://tinyurl.com/dellpercraid"]; phba;
      node [label="Physical disks", URL="http://www.amazon.com/gp/product/B002B7EIVC?ie=UTF8&tag=clblog01-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=B002B7EIVC"]; disks;
      phba -> disks;
      style = filled; bgcolor = lightgrey;
      label = "Hardware";
      URL = "http://www.dell.com/us/business/p/poweredge-r515/pd";
    }

    style=filled;
    bgcolor=aquamarine4;
    fontsize=10;
    labeljust=l;

    clienthba -> virtualhba;
    vmhba -> phba;
    label = "I/O stack";
    [/graphviz]
`


== Changelog ==

= 1.15 =
* Validate graph language and output format.
* Some sanity checking in the PHP bindings method.
* Document the need to specify both a shortcode `id` and a DOT graph name.
* Tested up to WP 4.7.2

= 1.14 =
* Finally worked out how to disable wptexturize! Less demangling now required.
* Add an option to control whether we ever emit JavaScript.

= 1.13 =
* Better diagnostic output when running `dot` doesn't work, including the command line used and adding the DOT as submitted, with line numbers. (Joachim Durchholz)
* Add more de-mangling rules, for smart quotes and ellipsis. (Joachim Durchholz)
* Improve the newline de-mangling. (Joachim Durchholz)
* Add the SVG output format. See http://blog.flirble.org/2015/11/15/adding-svg-support-tfo-graphviz/ for example. (Joachim Durchholz)
* Add a fix for if the requires GV class isn't loadable, such as when GV gets upgraded on the system. (Sam Wilson)
* Include some JavaScript when both an image map and width/height scaling is specified. This is required to scale the image map to whatever the image has been scaled to. Image map scaling code comes from https://github.com/davidjbradshaw/image-map-resizer

= 1.12 =
* `clean_url()` and `attribute_escape()` have both been deprecated. Migrate to `esc_url()` and 	esc_attr()`. (Sam Wilson)

= 1.11 =
* Remove deprecated constructor definitions. (Sam Wilson)
* Testing against 4.3.

= 1.10 =
* Require at least WP 4.2 now.
* Fix use of `add_query_arg()` to escape its output; a possible XSS vector.
* Added GPL v2 license information.

= 1.9 =
* Make some debugging output conditional.
* Fix where that debugging output is stored. (Sam Wilson)

= 1.8 =
* Fix a packaging error in 1.7.
* Fix use of hardcoded "/tmp" path. (Sam Wilson)

= 1.7 =
* Test upto WP 4.2.2.
* Change an `exec("mv...")` to using `rename()` instead. (Sam Wilson)
* Code documentation improvement.
* Some reformatting.

= 1.6 =
* Fix some cosmetic documentation issues.

= 1.5 =
* Update documentation for using the PHP gv bindings.

= 1.4 = 
* Wordpress 4.0 support.
* Fix for PHP Graphviz module loading; newer PHP's don't allow dl() at all in some cases, we should therefore detect this.
* Use WP_Error properly.
* Liberal use of try/catch to detect runtime issues.

= 1.3 =
* No changes; version bump for the later 3.x series.

= 1.2 =
* Removed leftover diagnostic code in PHP render class (which was appearing in posts!)
* Added remote Graphviz rendering support. Note that this is still young and will add a mark to the graph indicating it was generated by this plugin.
* Tested on WordPress 3.0.2 and 3.0.3.

= 1.1 =
* Added support for locally installed PHP bindings to the Graphviz library. This only works if PHP either allows dl() to load a module or gv.so/dll is staticly configured to load in php.ini.
* Made render module selection somewhat more robust.
* Attempt to create our wp-content/tfo-graphviz directory if it doesn't already exist.
* Better (as in, "any at all") error generation in the shortcode handler.
* Add content expiration - configurable. Will remove files from the wp-content/tfo-graphviz directory, but only if the threshold is >0 and older than the threshold.

= 1.0 =
* First release.

== Upgrade Notice ==

Upgrading from all previous versions strongly recommended; Earlier versions will not run on Wordpress 4 or on older Apache/PHP installations.


